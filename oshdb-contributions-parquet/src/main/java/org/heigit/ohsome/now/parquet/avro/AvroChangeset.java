/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.heigit.ohsome.now.parquet.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroChangeset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5144966561525300039L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroChangeset\",\"namespace\":\"org.heigit.ohsome.now.parquet.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"created_at\",\"type\":{\"type\":\"long\",\"locicalType\":\"timestamp-millis\"}},{\"name\":\"closed_at\",\"type\":[\"null\",{\"type\":\"long\",\"locicalType\":\"timestamp-millis\"}]},{\"name\":\"hot\",\"type\":\"boolean\"},{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"tags\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroChangeset> ENCODER =
      new BinaryMessageEncoder<AvroChangeset>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroChangeset> DECODER =
      new BinaryMessageDecoder<AvroChangeset>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroChangeset> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroChangeset> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroChangeset> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroChangeset>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroChangeset to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroChangeset from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroChangeset instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroChangeset fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long id;
   private long created_at;
   private java.lang.Long closed_at;
   private boolean hot;
   private java.util.List<java.lang.CharSequence> hashtags;
   private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroChangeset() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param created_at The new value for created_at
   * @param closed_at The new value for closed_at
   * @param hot The new value for hot
   * @param hashtags The new value for hashtags
   * @param tags The new value for tags
   */
  public AvroChangeset(java.lang.Long id, java.lang.Long created_at, java.lang.Long closed_at, java.lang.Boolean hot, java.util.List<java.lang.CharSequence> hashtags, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags) {
    this.id = id;
    this.created_at = created_at;
    this.closed_at = closed_at;
    this.hot = hot;
    this.hashtags = hashtags;
    this.tags = tags;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return created_at;
    case 2: return closed_at;
    case 3: return hot;
    case 4: return hashtags;
    case 5: return tags;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: created_at = (java.lang.Long)value$; break;
    case 2: closed_at = (java.lang.Long)value$; break;
    case 3: hot = (java.lang.Boolean)value$; break;
    case 4: hashtags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: tags = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public long getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'closed_at' field.
   * @return The value of the 'closed_at' field.
   */
  public java.lang.Long getClosedAt() {
    return closed_at;
  }


  /**
   * Sets the value of the 'closed_at' field.
   * @param value the value to set.
   */
  public void setClosedAt(java.lang.Long value) {
    this.closed_at = value;
  }

  /**
   * Gets the value of the 'hot' field.
   * @return The value of the 'hot' field.
   */
  public boolean getHot() {
    return hot;
  }


  /**
   * Sets the value of the 'hot' field.
   * @param value the value to set.
   */
  public void setHot(boolean value) {
    this.hot = value;
  }

  /**
   * Gets the value of the 'hashtags' field.
   * @return The value of the 'hashtags' field.
   */
  public java.util.List<java.lang.CharSequence> getHashtags() {
    return hashtags;
  }


  /**
   * Sets the value of the 'hashtags' field.
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<java.lang.CharSequence> value) {
    this.hashtags = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return The value of the 'tags' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * @param value the value to set.
   */
  public void setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.tags = value;
  }

  /**
   * Creates a new AvroChangeset RecordBuilder.
   * @return A new AvroChangeset RecordBuilder
   */
  public static org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder newBuilder() {
    return new org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder();
  }

  /**
   * Creates a new AvroChangeset RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroChangeset RecordBuilder
   */
  public static org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder newBuilder(org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder other) {
    if (other == null) {
      return new org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder();
    } else {
      return new org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder(other);
    }
  }

  /**
   * Creates a new AvroChangeset RecordBuilder by copying an existing AvroChangeset instance.
   * @param other The existing instance to copy.
   * @return A new AvroChangeset RecordBuilder
   */
  public static org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder newBuilder(org.heigit.ohsome.now.parquet.avro.AvroChangeset other) {
    if (other == null) {
      return new org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder();
    } else {
      return new org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroChangeset instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroChangeset>
    implements org.apache.avro.data.RecordBuilder<AvroChangeset> {

    private long id;
    private long created_at;
    private java.lang.Long closed_at;
    private boolean hot;
    private java.util.List<java.lang.CharSequence> hashtags;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> tags;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.closed_at)) {
        this.closed_at = data().deepCopy(fields()[2].schema(), other.closed_at);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.hot)) {
        this.hot = data().deepCopy(fields()[3].schema(), other.hot);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[4].schema(), other.hashtags);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.tags)) {
        this.tags = data().deepCopy(fields()[5].schema(), other.tags);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroChangeset instance
     * @param other The existing instance to copy.
     */
    private Builder(org.heigit.ohsome.now.parquet.avro.AvroChangeset other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.closed_at)) {
        this.closed_at = data().deepCopy(fields()[2].schema(), other.closed_at);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hot)) {
        this.hot = data().deepCopy(fields()[3].schema(), other.hot);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[4].schema(), other.hashtags);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tags)) {
        this.tags = data().deepCopy(fields()[5].schema(), other.tags);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public long getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setCreatedAt(long value) {
      validate(fields()[1], value);
      this.created_at = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearCreatedAt() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'closed_at' field.
      * @return The value.
      */
    public java.lang.Long getClosedAt() {
      return closed_at;
    }


    /**
      * Sets the value of the 'closed_at' field.
      * @param value The value of 'closed_at'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setClosedAt(java.lang.Long value) {
      validate(fields()[2], value);
      this.closed_at = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'closed_at' field has been set.
      * @return True if the 'closed_at' field has been set, false otherwise.
      */
    public boolean hasClosedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'closed_at' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearClosedAt() {
      closed_at = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hot' field.
      * @return The value.
      */
    public boolean getHot() {
      return hot;
    }


    /**
      * Sets the value of the 'hot' field.
      * @param value The value of 'hot'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setHot(boolean value) {
      validate(fields()[3], value);
      this.hot = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hot' field has been set.
      * @return True if the 'hot' field has been set, false otherwise.
      */
    public boolean hasHot() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hot' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearHot() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hashtags' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getHashtags() {
      return hashtags;
    }


    /**
      * Sets the value of the 'hashtags' field.
      * @param value The value of 'hashtags'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setHashtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.hashtags = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hashtags' field has been set.
      * @return True if the 'hashtags' field has been set, false otherwise.
      */
    public boolean hasHashtags() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hashtags' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder setTags(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.tags = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tags' field.
      * @return This builder.
      */
    public org.heigit.ohsome.now.parquet.avro.AvroChangeset.Builder clearTags() {
      tags = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroChangeset build() {
      try {
        AvroChangeset record = new AvroChangeset();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.created_at = fieldSetFlags()[1] ? this.created_at : (java.lang.Long) defaultValue(fields()[1]);
        record.closed_at = fieldSetFlags()[2] ? this.closed_at : (java.lang.Long) defaultValue(fields()[2]);
        record.hot = fieldSetFlags()[3] ? this.hot : (java.lang.Boolean) defaultValue(fields()[3]);
        record.hashtags = fieldSetFlags()[4] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.tags = fieldSetFlags()[5] ? this.tags : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroChangeset>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroChangeset>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroChangeset>
    READER$ = (org.apache.avro.io.DatumReader<AvroChangeset>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeLong(this.created_at);

    if (this.closed_at == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.closed_at);
    }

    out.writeBoolean(this.hot);

    long size0 = this.hashtags.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.hashtags) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.tags.size();
    out.writeMapStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.tags.entrySet()) {
      actualSize1++;
      out.startItem();
      out.writeString(e1.getKey());
      java.lang.CharSequence v1 = e1.getValue();
      out.writeString(v1);
    }
    out.writeMapEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.created_at = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.closed_at = null;
      } else {
        this.closed_at = in.readLong();
      }

      this.hot = in.readBoolean();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.hashtags;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("hashtags").schema());
        this.hashtags = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readMapStart();
      java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.tags; // Need fresh name due to limitation of macro system
      if (m1 == null) {
        m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
        this.tags = m1;
      } else m1.clear();
      for ( ; 0 < size1; size1 = in.mapNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence k1 = null;
          k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
          java.lang.CharSequence v1 = null;
          v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
          m1.put(k1, v1);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.created_at = in.readLong();
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.closed_at = null;
          } else {
            this.closed_at = in.readLong();
          }
          break;

        case 3:
          this.hot = in.readBoolean();
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.hashtags;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("hashtags").schema());
            this.hashtags = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 5:
          long size1 = in.readMapStart();
          java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.tags; // Need fresh name due to limitation of macro system
          if (m1 == null) {
            m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)size1);
            this.tags = m1;
          } else m1.clear();
          for ( ; 0 < size1; size1 = in.mapNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence k1 = null;
              k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
              java.lang.CharSequence v1 = null;
              v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
              m1.put(k1, v1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










